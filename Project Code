#include <stdio.h>			//Simple TicTacToe Game in Console Window (PvP or PvC) 
#include <conio.h>
#include <cstdlib>
#include "CC212SGL.h"
#pragma comment(lib, "CC212SGL.lib")

CC212SGL g;

#define r 3
#define c 3
char board[r][c] = { ' ',' ',' ',' ',' ',' ',' ',' ',' ' };
char player = 'X';
char temp;
int iCoord, jCoord;


void DisplayBoard()
{
	int x = 660;
	int y = 240;

	g.setDrawingColor(COLORS::RED);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawText(750, 50, "T");

	g.setDrawingColor(COLORS::ORANGE);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawText(800, 50, "i");

	g.setDrawingColor(COLORS::YELLOW);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawText(820, 50, "c");

	g.setDrawingColor(COLORS::SKYBLUE);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawText(850, 50, "T");

	g.setDrawingColor(COLORS::CYAN);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawText(890, 50, "a");

	g.setDrawingColor(COLORS::BLUE);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawText(940, 50, "c");

	g.setDrawingColor(COLORS::MAGENTA);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawText(970, 50, "T");

	g.setDrawingColor(COLORS::LIME);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawText(1010, 50, "o");

	g.setDrawingColor(COLORS::GREEN);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawText(1060, 50, "e");



	g.setDrawingColor(COLORS::WHITE);
	g.setDrawingThickness(5);
	g.setFontSizeAndBoldness(100, 700);
	g.drawRectangle(x, y, 600, 600);



	for (int i = 0; i < 3; i++)
	{
		g.drawLine(x + i * 200, y, x + i * 200, y + 600);
	}

	for (int j = 0; j < 3; j++)
	{
		g.drawLine(x, y + j * 200, x + 600, y + j * 200);
	}

	char tmp1[20];
	sprintf(tmp1, "%c", board[0][0]);
	g.drawText(660 + 60, 240 + 50, tmp1);

	char tmp2[20];
	sprintf(tmp2, "%c", board[0][1]);
	g.drawText(860 + 60, 240 + 50, tmp2);

	char tmp3[20];
	sprintf(tmp3, "%c", board[0][2]);
	g.drawText(1060 + 60, 240 + 50, tmp3);

	char tmp4[20];
	sprintf(tmp4, "%c", board[1][0]);
	g.drawText(660 + 60, 440 + 50, tmp4);

	char tmp5[20];
	sprintf(tmp5, "%c", board[1][1]);
	g.drawText(860 + 60, 440 + 50, tmp5);

	char tmp6[20];
	sprintf(tmp6, "%c", board[1][2]);
	g.drawText(1060 + 60, 440 + 50, tmp6);

	char tmp7[20];
	sprintf(tmp7, "%c", board[2][0]);
	g.drawText(660 + 60, 640 + 50, tmp7);

	char tmp8[20];
	sprintf(tmp8, "%c", board[2][1]);
	g.drawText(860 + 60, 640 + 50, tmp8);

	char tmp9[20];
	sprintf(tmp9, "%c", board[2][2]);
	g.drawText(1060 + 60, 640 + 50, tmp9);
}

void PlayerVsPlayer()
{
	printf("Enter The Coordinates of The Position (Player %c):\n", player);
	scanf("%d%d", &iCoord, &jCoord);
	system("cls");

	if (iCoord > 2 || iCoord < 0)
	{
		printf("Invalid place, Press on any key to continue...");
		getch();
		system("cls");
		return;
	}
	else if (jCoord < 0 || jCoord > 2)
	{
		printf("Invalid place, Press on any key to continue...");
		getch();
		system("cls");
		return;
	}
	else if (board[iCoord][jCoord] != ' ')
	{
		printf("Location has already been taken, Press on any key to continue...\n");
		getch();
		system("cls");
		return;
	}
	for (int i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			if (i == iCoord && j == jCoord)
			{
				board[i][j] = player;
			}
		}
	}

	if (player == 'X')
	{
		temp = player;
		player = 'O';
	}
	else if (player == 'O')
	{
		player = 'X';
	}
}

void PlayerVsComputer()
{
	printf("Enter The Coordinates of The Position:\n");
	scanf("%d%d", &iCoord, &jCoord);
	system("cls");
	if (iCoord > 2 || iCoord < 0)
	{
		printf("Invalid place, Press on any key to continue...");
		getch();
		system("cls");
		return;
	}
	else if (jCoord < 0 || jCoord > 2)
	{
		printf("Invalid place,  Press on any key to continue...");
		getch();
		system("cls");
		return;
	}
	else if (board[iCoord][jCoord] != ' ')
	{
		printf("Location has already been taken,  Press on any key to continue...\n");
		getch();
		system("cls");
		return;
	}


	board[iCoord][jCoord] = 'X';


	while (true)
	{
		//row 1
		if ((board[0][0] == 'X') && (board[0][1] == 'X') && board[0][2] == ' ')
		{
			board[0][2] = 'O';
			break;
		}
		else if ((board[0][0] == 'X') && (board[0][2] == 'X') && board[0][1] == ' ')
		{
			board[0][1] = 'O';
			break;
		}
		else if ((board[0][1] == 'X') && (board[0][2] == 'X') && board[0][0] == ' ')
		{
			board[0][0] = 'O';
			break;
		}
		//row 2
		else if ((board[1][0] == 'X') && (board[1][1] == 'X') && board[1][2] == ' ')
		{
			board[1][2] = 'O';
			break;
		}
		else if ((board[1][0] == 'X') && (board[1][2] == 'X') && board[1][1] == ' ')
		{
			board[1][1] = 'O';
			break;
		}
		else if ((board[1][1] == 'X') && (board[1][2] == 'X') && board[1][0] == ' ')
		{
			board[1][0] = 'O';
			break;
		}
		//row 3
		else if ((board[2][0] == 'X') && (board[2][1] == 'X') && board[2][2] == ' ')
		{
			board[2][2] = 'O';
			break;
		}

		else if ((board[2][0] == 'X') && (board[2][2] == 'X') && board[2][1] == ' ')
		{
			board[2][1] = 'O';
			break;
		}
		else if ((board[2][1] == 'X') && (board[2][2] == 'X') && board[2][0] == ' ')
		{
			board[2][0] = 'O';
			break;
		}
		//col 1
		else if ((board[0][0] == 'X') && (board[1][0] == 'X') && board[2][0] == ' ')
		{
			board[2][0] = 'O';
			break;
		}
		else if ((board[0][0] == 'X') && (board[2][0] == 'X') && board[1][0] == ' ')
		{
			board[1][0] = 'O';
			break;
		}
		else if ((board[1][0] == 'X') && (board[2][0] == 'X') && board[0][0] == ' ')
		{
			board[0][0] = 'O';
			break;
		}
		//col 2
		else if ((board[0][1] == 'X') && (board[1][1] == 'X') && board[2][1] == ' ')
		{
			board[2][1] = 'O';
			break;
		}
		else if ((board[1][1] == 'X') && (board[2][1] == 'X') && board[0][1] == ' ')
		{
			board[0][1] = 'O';
			break;
		}
		else if ((board[0][1] == 'X') && (board[2][1] == 'X') && board[1][1] == ' ')
		{
			board[1][1] = 'O';
			break;
		}
		//col 3
		else if ((board[0][2] == 'X') && (board[1][2] == 'X') && board[2][2] == ' ')
		{
			board[2][2] = 'O';
			break;
		}
		else if ((board[2][2] == 'X') && (board[0][2] == 'X') && board[1][2] == ' ')
		{
			board[1][2] = 'O';
			break;
		}
		else if ((board[2][2] == 'X') && (board[1][2] == 'X') && board[0][2] == ' ')
		{
			board[0][2] = 'O';
			break;
		}
		//main diagonal
		else if ((board[0][0] == 'X') && (board[1][1] == 'X') && board[2][2] == ' ')
		{
			board[2][2] = 'O';
			break;
		}
		else if ((board[1][1] == 'X') && (board[2][2] == 'X') && board[0][0] == ' ')
		{
			board[0][0] = 'O';
			break;
		}
		else if ((board[2][2] == 'X') && (board[0][0] == 'X') && board[1][1] == ' ')
		{
			board[1][1] = 'O';
			break;
		}
		//secondary diagonal
		else if ((board[0][2] == 'X') && (board[1][1] == 'X') && board[2][0] == ' ')
		{
			board[2][0] = 'O';
			break;
		}
		else if ((board[2][0] == 'X') && (board[0][2] == 'X') && board[1][1] == ' ')
		{
			board[1][1] = 'O';
			break;
		}
		else if ((board[1][1] == 'X') && (board[2][0] == 'X') && board[0][2] == ' ')
		{
			board[0][2] = 'O';
			break;
		}
		else //Play anywhere
		{
			int flag = 0;
			//Make sure that the board has a place
			for (int i = 0; i < r; i++)
			{
				for (int j = 0; j < c; j++)
				{
					if (board[i][j] == ' ')
					{
						flag = 1;
					}
				}
			}

			if (flag == 0)
			{
				break;
			}

			int row, col;
			row = rand() % 3;
			col = rand() % 3;

			while (board[row][col] != ' ')
			{
				row = rand() % 3;
				col = rand() % 3;
			}
			board[row][col] = 'O';
			break;
		}
	}
}

char WhoIsTheWinner()
{
	int counter = 0;
	for (int i = 0; i < r; i++)		//Check Draw
	{
		for (int j = 0; j < c; j++)
		{
			if (board[i][j] != 'X' && board[i][j] != 'O')
			{
				counter++;
			}
		}
	}

	if (board[0][0] == 'X' && board[0][1] == 'X' && board[0][2] == 'X')		//Check Rows
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(660, 340, 1260, 340);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'X';
	}
	else if (board[0][0] == 'O' && board[0][1] == 'O' && board[0][2] == 'O')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(660, 340, 1260, 340);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'O';
	}
	else if (board[1][0] == 'X' && board[1][1] == 'X' && board[1][2] == 'X')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(660, 540, 1260, 540);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'X';
	}
	else if (board[1][0] == 'O' && board[1][1] == 'O' && board[1][2] == 'O')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(660, 540, 1260, 540);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'O';
	}
	else if (board[2][0] == 'X' && board[2][1] == 'X' && board[2][2] == 'X')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(660, 740, 1260, 740);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'X';
	}
	else if (board[2][0] == 'O' && board[2][1] == 'O' && board[2][2] == 'O')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(660, 740, 1260, 740);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'O';
	}



	if (board[0][0] == 'X' && board[1][0] == 'X' && board[2][0] == 'X')		//Check Columns
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(750, 240, 750, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'X';
	}
	else if (board[0][0] == 'O' && board[1][0] == 'O' && board[2][0] == 'O')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(750, 240, 750, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'O';
	}
	else if (board[0][1] == 'X' && board[1][1] == 'X' && board[2][1] == 'X')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(950, 240, 950, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'X';
	}
	else if (board[0][1] == 'O' && board[1][1] == 'O' && board[2][1] == 'O')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(950, 240, 950, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'O';
	}
	else if (board[0][2] == 'X' && board[1][2] == 'X' && board[2][2] == 'X')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(1150, 240, 1150, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'X';
	}
	else if (board[0][2] == 'O' && board[1][2] == 'O' && board[2][2] == 'O')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(1150, 240, 1150, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'O';
	}

	if (board[0][0] == 'X' && board[1][1] == 'X' && board[2][2] == 'X')		//Check Main Diagonal
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(660, 240, 1260, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'X';
	}
	else if (board[0][0] == 'O' && board[1][1] == 'O' && board[2][2] == 'O')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(660, 240, 1260, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'O';
	}
	else if (board[0][2] == 'X' && board[1][1] == 'X' && board[2][0] == 'X')	//Check Secondary Diagonal
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(1260, 240, 660, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'X';
	}
	else if (board[0][2] == 'O' && board[1][1] == 'O' && board[2][0] == 'O')
	{
		g.beginDraw();
		g.setDrawingColor(COLORS::YELLOW);
		g.drawLine(1260, 240, 660, 840);
		g.setDrawingColor(COLORS::WHITE);
		DisplayBoard();
		g.endDraw();
		return 'O';
	}
	if (counter == 0)
	{
		return 'C';
	}
	return '.';
}

void main()
{	
	g.setup();
reset:
	system("cls");

	printf("Choose whether you want to play vs the computer (C) or another player (P)? [C/P]\n");
	
	char PlayerPreference = getch();
	
	while (true)
	{
		if (PlayerPreference == 'C' || PlayerPreference == 'c')
		{
			g.beginDraw();
			DisplayBoard();
			g.endDraw();
			PlayerVsComputer();
		}
		else if (PlayerPreference == 'P' || PlayerPreference == 'p')
		{
			g.beginDraw();
			DisplayBoard();
			g.endDraw();
			PlayerVsPlayer();
		}
		else if (PlayerPreference != 'c' || PlayerPreference != 'C' || PlayerPreference != 'P' || PlayerPreference != 'p')
		{
			printf("Invalid Input, Press on any key to continue...\n");
			getch();
			system("cls");
			goto reset;
		}

		g.beginDraw();
		DisplayBoard();
		g.endDraw();

		if (WhoIsTheWinner() == 'X')
		{
			printf("The Winner is Player X\n");
			printf("Press 'Q' to Quit or 'R' to Reset the Game");
			char playerResponse = getch();
			system("cls");
			if (playerResponse == 'Q' || playerResponse == 'q')
			{
				exit(0);
			}
			else if (playerResponse == 'R' || playerResponse == 'r')
			{
				for (int i = 0; i < r; i++)
				{
					for (int j = 0; j < c; j++)
					{
						board[i][j] = { ' ' };
					}
				}
				player = 'X';
				iCoord = 0;
				jCoord = 0;
				goto reset;
			}
		}
		else if (WhoIsTheWinner() == 'O')
		{
			printf("The Winner is Player O\n");
			printf("Press 'Q' to Quit or 'R' to Reset the Game");
			char playerResponse = getch();
			system("cls");
			if (playerResponse == 'Q' || playerResponse == 'q')
			{
				exit(0);
			}
			else if (playerResponse == 'R' || playerResponse == 'r')
			{
				for (int i = 0; i < r; i++)
				{
					for (int j = 0; j < c; j++)
					{
						board[i][j] = { ' ' };
					}
				}
				player = 'O';
				iCoord = 0;
				jCoord = 0;
				goto reset;
			}
		}
		else if (WhoIsTheWinner() == 'C')
		{
			printf("Draw!\n");
			printf("Press 'Q' to Quit or 'R' to Reset the Game");
			char playerResponse = getch();
			system("cls");
			if (playerResponse == 'Q' || playerResponse == 'q')
			{
				exit(0);
			}
			else if (playerResponse == 'R' || playerResponse == 'r')
			{
				for (int i = 0; i < r; i++)
				{
					for (int j = 0; j < c; j++)
					{
						board[i][j] = { ' ' };
					}
				}
				player = 'X';
				iCoord = 0;
				jCoord = 0;
				goto reset;
			}
		}
	}
}
